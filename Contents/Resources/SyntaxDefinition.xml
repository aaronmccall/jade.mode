<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
  <head>
      <name>jade</name>
      <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@#%.]]>
      </charsintokens>
      <charsdelimitingtokens><![CDATA[ ]]></charsdelimitingtokens>
    </head>
  <states>
    <default id="Base" scope="meta.default">
      <keywords id="Tags" casesensitive="yes" useforautocomplete="yes" scope="markup.tag.attribute.name.generic.jade">
        <regex>^\s*(data|html|head|title|base|link|meta|style|script|noscript|body|article|nav|aside|section|header|footer|(h[1-6])|hgroup|address|p|hr|pre|blockquote|ol|ul|li|dl|dt|dd|figure|figcaption|div|table|caption|thead|tbody|tfoot|tr|th|td|col|colgroup|form|fieldset|legend|label|input|button|select|datalist|optgroup|option|textarea|keygen|output|progress|meter|details|summary|command|menu|del|ins|img|iframe|embed|object|param|video|audio|source|canvas|track|map|area|a|em|strong|i|b|u|s|small|abbr|q|cite|dfn|sub|sup|time|code|kbd|samp|var|mark|bdi|bdo|ruby|rt|rp|span|br|wbr)\b</regex>
      </keywords>
      <!-- jade Specific Keywords -->
      <keywords id="jade Specific Keywords" scope="keyword.control.jade">
            <regex>^\s*(append)\b</regex>
            <regex>^\s*(block)\b</regex>
            <regex>^\s*(case)\b</regex>
            <regex>^\s*(each)\b</regex>
            <regex>^\s*(extends)\b</regex>
            <regex>^\s*(for)\b</regex>
            <regex>^\s*(if)\b</regex>
            <regex>^\s*(include)\b</regex>
            <regex>^\s*(mixin)\b</regex>
            <regex>^\s*(when)\b</regex>
          </keywords>
      <state id="jade ID" useforautocomplete="no" scope="markup.tag.attribute.name.id.jade">
            <begin>
              <regex>#(?=\w)</regex>
            </begin>
            <end>
              <regex>[\w-]*(?=[^\w-]*)</regex>
            </end>
        </state>
      <state id="jade Class" useforautocomplete="no" scope="markup.tag.attribute.name.class.jade">
          <begin>
            <regex>\.(?=\w)</regex>
          </begin>
          <end>
            <regex>[\w-]*(?=[^\w-]*)</regex>
          </end>
      </state>
      <state id="jade HTML Attributes" useforautocomplete="no" scope="markup.tag.jade">
        <begin><regex>\(</regex></begin>
        <end><regex>\)</regex></end>
        <state id="Strings in jade HTML Attributes" type="string" useforautocomplete="no" scope="string">
          <begin><regex>"</regex></begin>
          <end><regex>"</regex></end>
        </state>
        <!-- STUDIO support for single quote strings -->
        <state id="Single Strings in jade HTML Attributes" type="string" useforautocomplete="no" scope="string">
          <begin>
            <regex>'</regex>
          </begin>
          <end>
            <regex>'</regex>
          </end>
        </state>
        <keywords id="Attributes in jade HTML Attributes" useforautocomplete="no" scope="markup.tag.attribute.value.jade">
          <regex>([a-zA-Z]{1}[\w\-\:]*)(?=[ \t]*=)</regex>
        </keywords>
      </state>
      <state id="jade Embedded Javascript">
        <begin><regex>\A\s*(?:-|=|!=)</regex></begin>
        <end><regex>.$</regex></end>
        <keywords id="JS Keywords" useforautocomplete="yes" scope="keyword.control.js.jade" >
          <regex>\b(if|else|for|in|while|do|continue|break|with|try|catch|switch|case|new|var|function|return|this|delete|true|false|void|throw|typeof|const|default)\b</regex>
        </keywords>
        <!--
			        <state-link mode="Javascript" state="AutodocComment" />
			        <state-link mode="Javascript" state="Comment" />
			        <state-link mode="Javascript" state="Regular Expressions" />
			        <state-link mode="Javascript" state="String" />
			        <state-link mode="Javascript" state="SingleString" />
		        -->
      </state>
      <state id="jade Interpolate Escaped" useforautocomplete="no" scope="language.variable.interpolation.escaped.jade" >
        <begin>
          <regex>(?:#\{)</regex>
        </begin>
        <end>
          <regex>\}(?&lt;!\\)</regex>
        </end>
      </state>
      <state id="jade Interpolate Unescaped" useforautocomplete="no" scope="language.variable.interpolation.jade">
        <begin>
          <regex>(?:[\\]{0}\!\{)</regex>
        </begin>
        <end>
          <regex>\}(?&lt;!\\)</regex>
        </end>
      </state>
      <state id="jade Comment" useforautocomplete="no" scope="comment.jade">
        <begin>
          <regex>^\s*(?:\/\/)</regex>
        </begin>
        <end>
          <regex>[\r\n]</regex>
        </end>
      </state>
      <!-- TODO: end tag invalid for indented comment block
			      <state id="jade Comment/Block" useforautocomplete="no" scope="comment.block.jade">
			        <begin>
			          <regex>^(\s*)(//)\s*$</regex>
			        </begin>
			        <end>
			          <regex>^(?!\1\s+)</regex>
			        </end>
			      </state>
		      -->
      <state id="jade Comment/Unbuffered" useforautocomplete="no" scope="comment.unbuffered.jade">
        <begin>
          <regex>^\s*(?:\/\/-)</regex>
        </begin>
        <end>
          <regex>[\r\n]</regex>
        </end>
      </state>
      <state id="Comment" type="comment" foldable="yes" scope="markup.comment">
				<begin><regex>&lt;!--</regex><autoend>--></autoend></begin>
				<end><regex>--></regex></end>
				<keywords id="SGML Double Dash" useforautocomplete="no" scope="meta.invalid.sgmlcomment">
					<regex>(?&lt;!\!)(--)(?!>)</regex>
				</keywords>
			</state>
      <state id="jade Doctype" useforautocomplete="no" scope="markup.declaration.jade">
        <begin>
          <regex>\A(?:\!\!\!)</regex>
        </begin>
        <end>
          <regex>[\r\n]</regex>
        </end>
      </state>
      <keywords id="Entities" useforautocomplete="no" scope="markup.constant.entity.jade">
				<regex>(&amp;#\d+;)</regex>
				<regex>(&amp;#x\h+;)</regex>
				<regex>(&amp;[\w\d\.\-]+;)</regex>
			</keywords>
	    <import mode="HTML" />
	  </default>
	</states>
</syntax>